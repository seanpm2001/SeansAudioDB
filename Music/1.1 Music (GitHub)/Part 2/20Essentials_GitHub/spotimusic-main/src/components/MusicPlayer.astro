<script type='module'>
  import { MusicPlayer } from './modules/MusicPlayer.js';
  import NamesOfPlaylists from './data/playlist.json' with { type: 'json' };
  const allSlugs = NamesOfPlaylists.map(({ slug }) => slug);
  const randomSlug = ~~(Math.random() * allSlugs.length);
  const slug = allSlugs[randomSlug];
  const playlistCorriente = await import(`./data/${slug}.json`, {
    with: { type: 'json' }
  });
  const playlistCorrienteJson = playlistCorriente.default;
  const randonNumSong = ~~(Math.random() * playlistCorrienteJson.length);
  const playlistName = slug;
  const id = randonNumSong + 1;
  const musicPlayer = new MusicPlayer(playlistName, id);

  const buttons = {
    play: document.querySelector('.song-player-container .play'),
    prev: document.querySelector('.song-player-container .prev'),
    next: document.querySelector('.song-player-container .next'),
    shuffle: document.querySelector('.song-player-container .shuffle'),
    repeat: document.querySelector('.song-player-container .repeat')
  };

  buttons.play.addEventListener('click', () => musicPlayer.play());
  buttons.prev.addEventListener('click', () => musicPlayer.prev());
  buttons.next.addEventListener('click', () => musicPlayer.next());
  buttons.repeat.addEventListener('click', () =>
    buttons.repeat.classList.toggle('disabled')
  );
  buttons.shuffle.addEventListener('click', () => {
    buttons.shuffle.classList.toggle('disabled');
    musicPlayer.sortSongs();
    
  });

  setTimeout(() => {
    let { title: ButtonTitle, artist, album } = musicPlayer.getInfoSong();
    musicPlayer.updateItemClicked({ ButtonTitle, artist, album });
    document.querySelector('.title-green').classList.add('playlist-item-active')
  }, 50);

  const playlistItems = document.querySelectorAll('.playlist-item');
  playlistItems.forEach(playlist => {
    playlist.addEventListener('click', async () => {
      const slug = playlist.dataset.id;
      let title = playlist.querySelector('.title').textContent;

      document.querySelectorAll('.playlist-item-active').forEach(el => el.classList.remove('playlist-item-active'))
      playlist.classList.add('playlist-item-active');

      setTimeout(() => {
        const { title: ButtonTitle, artist, album } = musicPlayer.getInfoSong();
        musicPlayer.updateItemClicked({ ButtonTitle, artist, album });
      }, 300);

      await musicPlayer.selectList(
        slug,
        title,
        playlist.dataset.color
      );

    });
  });

  const songPlaylist = document.querySelector('.song.playlist');
  songPlaylist.addEventListener('click', ev => {
    const isClick = ev.detail === 1;

    if (isClick) {
      const newSongs = [...document.querySelectorAll('song-item')].map(song =>
        song.getData()
      );
      musicPlayer.setSongs(newSongs);
      const rowItem = ev
        .composedPath()
        .find(tag => tag.classList?.contains('row-item'));
      let id = Number(rowItem.dataset?.id);
      let newIndex = id;
      if (musicPlayer.isShuffle) {
        newIndex = musicPlayer.songList.findIndex(song => song.index === id);
      }

      if (rowItem) {
        musicPlayer.prepare(newIndex);
        musicPlayer.play();
        musicPlayer.togglePlayPause(true);
      }
    }
  });
</script>
