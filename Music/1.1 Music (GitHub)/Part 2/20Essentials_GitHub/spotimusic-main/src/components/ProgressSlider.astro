---

---

<script type='module'>
  import { emitEvent } from './modules/emitter.js';

  class ProgressSlider extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: 'open' });
    }

    static get styles() {
      return /* css */ `

      :host {
        --progress: 0%;
      }

        * {
            cursor: pointer;
        }

      .bar-container {
        background: #555;
        height: 0.28vmax;
        border-radius: 1vmax;

        & .bar {
          
          width: var(--progress);
          height: 100%;
          background-color: var(--theme-color);
          transition: background-color .2s ease;
          position: relative;
          border-radius: 1vmax;

          &::before {
            content: '';
            --circle-size: 0.8vmax;
            width: var(--circle-size);
            height: var(--circle-size);
            position: absolute;
            top: 50%;
            transform: translateX(40%) translateY(-50%);
            right: 0%;
            background: #fff;
            border-radius: 50%;
            z-index: 50;
          }
        }

      }
      `;
    }

    connectedCallback() {
      this.setValue(this.getAttribute('value') ?? 0);
      this.render();
      const barContainer = this.shadowRoot.querySelector('.bar-container');
      barContainer.addEventListener('click', ({ offsetX }) => {
        const size = barContainer.getBoundingClientRect().width;
        const targetSize = Math.min(Math.max(0, offsetX), size);
        const percentage = ~~((targetSize * 100) / size);

        this.id === 'current-song' &&
          emitEvent('song:changetime', this, percentage);
        this.id === 'volume' && emitEvent('volume:change', this, percentage);

        this.setValue(percentage);
      });

      barContainer.addEventListener(
        'wheel',
        ({ deltaY }) => {
          const STEP = 0.05;
          const delta = deltaY < 0 ? STEP : -STEP;

          this.id === 'current-song' && emitEvent('song:slidetime', this, delta);
          this.id === 'volume' && emitEvent('volume:slide', this, delta);

          const oldValue = Number(this.getAttribute('value'));
          const value = Math.max(0, Math.min(oldValue + delta * 100, 100));

          this.setValue(value);
        },
        { passive: true }
      );

      //New

      let isDragging = false;

      barContainer.addEventListener('mousedown', event => {
        isDragging = true;
        updateProgress(event);
      });

      document.addEventListener('volumeNewProgress', ({ detail }) => {
        if (this.id === 'current-song') return;
        const { muteado, lastVolume } = detail;
        if (muteado) {
          this.setValue(0);
        } else {
          this.setValue(lastVolume * 100);
        }
      });

      document.addEventListener('mousemove', event => {
        if (!isDragging) return;
        updateProgress(event);
      });

      document.addEventListener('mouseup', () => {
        isDragging = false;
      });

      const updateProgress = ({ clientX }) => {
        const size = barContainer.getBoundingClientRect();
        const targetSize = Math.min(Math.max(0, clientX - size.left), size.width);
        const percentage = ~~((targetSize * 100) / size.width);

        this.id === 'current-song' &&
          emitEvent('song:changetime', this, percentage);
        this.id === 'volume' && emitEvent('volume:change', this, percentage);
        this.setValue(percentage);
      };
    }

    setValue(value) {
      this.setAttribute('value', value);
      this.style.setProperty('--progress', `${value}%`);
    }

    render() {
      this.shadowRoot.innerHTML = /* html */ `
        <style>${ProgressSlider.styles}</style>
        <div class="bar-container">
          <div class="bar"></div>
        </div>
      `;
    }
  }

  customElements.define('progress-slider', ProgressSlider);
</script>
